#include <iostream>
#include <vector>

using std::vector;

int gm(vector<int> weight, vector<int> values) {
    int max_i = 0;
    double max = 0;

    for (int i = 0; i < weight.size(); i++) {
        if (weight[i] != 0 && (double) values[i] / weight[i] > max) {
            max = (double) values[i] / weight[i];
            max_i = i;
        }
    }
    return max_i;
}

double go(int capacity, vector<int> weights, vector<int> values) {
    double value = 0.0;

    for (int i = 0; i < weight.size(); i++) {
        if (capacity == 0) return value;
        int index = gm(weight, values);
        int a = std::min(capacity, weight[index]);
        value += a * (double) values[index] / weight[index];
        weight[index] -= a;
        capacity -= a;
    }

    return value;
}

int main() {
    int z;
    int capacity;
    std::cin >> z >> capacity;
    vector<int> values(z);
    vector<int> weight(z);
    for (int j = 0; j < z; j++) {
        std::cin >> values[j] >> weight[j];
    }

    double optimal_value = go(capacity, weight, values);

    std::cout.precision(10);
    std::cout << optimal_value << std::endl;
    return 0;
}